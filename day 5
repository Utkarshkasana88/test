{
  "type": "Usage",
  "timeframe": "Custom",
  "timePeriod": {
    "from": "2025-08-01T00:00:00Z",
    "to": "2025-08-05T23:59:59Z"
  },
  "dataset": {
    "granularity": "Daily",
    "filter": {
      "dimensions": {
        "name": "ResourceGroupName",
        "operator": "In",
        "values": ["your-resource-group-name"]
      }
    },
    "aggregation": {
      "totalCost": {
        "name": "PreTaxCost",
        "function": "Sum"
      }
    },
    "grouping": [
      {
        "type": "Dimension",
        "name": "MeterName"
      },
      {
        "type": "Dimension",
        "name": "ResourceId"
      }
    ]
  }
}


{
  "type": "Usage",
  "timeframe": "MonthToDate",
  "dataset": {
    "granularity": "Daily",
    "filter": {
      "and": [
        {
          "tags": {
            "name": "JOB_NO",
            "operator": "In",
            "values": [
              "1234"
            ]
          }
        },
        {
          "dimensions": {
            "name": "ResourceId",
            "operator": "In",
            "values": [
              "/subscriptions/cc62aeac4-1257-4515-8a36-9a22b65999f5/resourcegroups/arg-ct-neu-bigdataworkspace/providers/microsoft.databricks/workspaces/adw-ct-neu-bigdataworkspace"
            ]
          }
        }
      ]
    },
    "aggregation": {
      "totalCost": {
        "name": "PreTaxCost",
        "function": "Sum"
      }
    },
    "grouping": [
      {
        "type": "Dimension",
        "name": "ResourceId"
      }
    ]
  },
  "timePeriod": {
    "from": "2025-07-31T00:00:00Z",
    "to": "2025-07-31T00:00:00Z"
  }
}

{
  "type": "Usage",
  "timeframe": "MonthToDate",
  "dataset": {
    "granularity": "Daily",
    "aggregation": {
      "totalCost": {
        "name": "PreTaxCost",
        "function": "Sum"
      }
    },
    "grouping": [
      {
        "type": "Dimension",
        "name": "MeterName"
      }
    ]
  }
}

"filter": {
  "dimensions": {
    "name": "ServiceName",
    "operator": "In",
    "values": [
      "Azure Databricks",
      "Other"
    ]
  }
}

import requests

ACCOUNT_ID = "<your_account_id>"
TOKEN = "<your_account_level_pat>"

START_TIME = "2025-08-01T00:00:00Z"
END_TIME = "2025-08-05T23:59:59Z"

url = f"https://accounts.cloud.databricks.com/api/2.0/accounts/{ACCOUNT_ID}/usage/download"
headers = {"Authorization": f"Bearer {TOKEN}"}
params = {
    "start_time": START_TIME,
    "end_time": END_TIME
}

response = requests.get(url, headers=headers, params=params)

# Save the CSV
with open("dbu_usage.csv", "wb") as f:
    f.write(response.content)

print("Downloaded DBU usage to dbu_usage.csv")

import requests
from datetime import datetime

workspace_url = "https://<workspace>.azuredatabricks.net"
token = "<your_workspace_pat>"
cluster_id = "<your_cluster_id>"

def ms_to_datetime(ms):
    return datetime.utcfromtimestamp(ms / 1000)

headers = {"Authorization": f"Bearer {token}"}
response = requests.get(
    f"{workspace_url}/api/2.0/clusters/get",
    headers=headers,
    params={"cluster_id": cluster_id}
)

cluster = response.json()

start_time = ms_to_datetime(cluster["start_time"])
end_time = ms_to_datetime(cluster["terminated_time"])
duration_hours = (end_time - start_time).total_seconds() / 3600

# Get node type and DBU rate (you can maintain a lookup dict)
node_type = cluster["node_type_id"]
dbu_rate_per_node = {
    "Standard_DS3_v2": 3.0,  # example, update based on pricing
    "Standard_D8s_v3": 6.0
}
rate = dbu_rate_per_node.get(node_type, 3.0)

# Estimate DBUs
num_workers = cluster.get("num_workers", 0)
total_nodes = num_workers + 1  # include driver
estimated_dbus = total_nodes * duration_hours * rate

print(f"Cluster ran for {duration_hours:.2f} hours")
print(f"Estimated DBUs: {estimated_dbus:.2f}")





